#!/bin/bash

# Script pour ex√©cuter localement les v√©rifications de qualit√© du code
# comme d√©finies dans .github/workflows/code-quality.yml

# --- Pr√©requis ---
# 1. Assurez-vous d'avoir Python 3.12+ et pip install√©s.
# 2. Activez votre environnement virtuel si vous en utilisez un.
# 3. Installez les d√©pendances du projet :
#    pip install -r requirements.txt
# 4. Installez les outils de qualit√© sp√©cifiques (s'ils ne sont pas dans requirements.txt) :
#    pip install mypy bandit safety vulture

# --- Configuration ---
SRC_DIRS="src/ tests/"
PYTHON_FILES_TO_CHECK="src/ tests/" # Pour Black et isort
MAX_LINE_LENGTH=88
FLAKE8_IGNORES="E203,W503,E501"
VULTURE_EXCLUDES="*/__pycache__"
VULTURE_MIN_CONFIDENCE=80

# Variables pour les couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # Pas de couleur

echo -e "${YELLOW}--- D√©marrage des v√©rifications locales de qualit√© du code ---${NC}"
echo "R√©pertoires cibl√©s pour la plupart des v√©rifications: ${SRC_DIRS}"
echo ""

# Fonction pour ex√©cuter une commande et afficher le r√©sultat
run_check() {
    local tool_name="$1"
    local command_to_run="$2"
    
    echo -e "${YELLOW}Lancement de $tool_name...${NC}"
    if eval "$command_to_run"; then
        echo -e "${GREEN}$tool_name : Succ√®s${NC}"
        return 0
    else
        echo -e "${RED}$tool_name : √âchec${NC}"
        return 1
    fi
}

# --- Ex√©cution des v√©rifications ---
declare -a FAILED_CHECKS

# 1. Black (Formatage du code)
if ! run_check "Black (formatage)" "black --check --diff ${PYTHON_FILES_TO_CHECK}"; then
    FAILED_CHECKS+=("Black")
fi
echo ""

# 2. isort (Tri des imports)
if ! run_check "isort (tri des imports)" "isort --check-only --diff src/ tests/"; then
    FAILED_CHECKS+=("isort")
fi
echo ""

# 3. flake8 (Linting)
if ! run_check "flake8 (linting)" "flake8 src --max-line-length=88 --extend-ignore=E203,W503,E501"; then
    FAILED_CHECKS+=("flake8")
fi
echo ""

# 4. mypy (V√©rification des types)
# mypy peut √™tre verbeux, donc on ne capture pas sa sortie de la m√™me mani√®re
echo -e "${YELLOW}Lancement de mypy (v√©rification des types)...${NC}"
# Note: `continue-on-error: true` est dans la CI, donc ici on ne fait pas √©chouer le script globalement
# mais on indique s'il y a des erreurs.
if mypy src/ --ignore-missing-imports --strict-optional; then
    echo -e "${GREEN}mypy : Succ√®s (ou pas d'erreurs bloquantes)${NC}"
else
    echo -e "${RED}mypy : Des erreurs de typage ont √©t√© trouv√©es.${NC}"
    # Optionnel : d√©commentez pour faire √©chouer le script si mypy √©choue
    # FAILED_CHECKS+=("mypy")
fi
echo ""

# 5. Bandit (Linting de s√©curit√©)
# Bandit g√©n√®re un rapport, donc on ne v√©rifie pas son code de sortie directement ici
# mais on informe l'utilisateur de v√©rifier le rapport.
echo -e "${YELLOW}Lancement de Bandit (linting de s√©curit√©)...${NC}"
if bandit -r src/ -f json -o bandit-results.json; then
    echo -e "${GREEN}Bandit : Scan termin√©. V√©rifiez bandit-results.json pour les probl√®mes.${NC}"
else
    echo -e "${RED}Bandit : Erreur lors de l'ex√©cution. V√©rifiez bandit-results.json.${NC}"
    # FAILED_CHECKS+=("Bandit") # Vous pouvez choisir de le faire √©chouer ici
fi
echo "Rapport Bandit g√©n√©r√© : bandit-results.json"
echo ""

# 6. Safety (V√©rification des vuln√©rabilit√©s des d√©pendances)
echo -e "${YELLOW}Lancement de Safety (vuln√©rabilit√©s des d√©pendances)...${NC}"
if safety check --json > safety-results.json; then
    echo -e "${GREEN}Safety : Scan termin√©. V√©rifiez safety-results.json pour les probl√®mes.${NC}"
else
    echo -e "${RED}Safety : Erreur lors de l'ex√©cution ou vuln√©rabilit√©s trouv√©es. V√©rifiez safety-results.json.${NC}"
    # FAILED_CHECKS+=("Safety") # Vous pouvez choisir de le faire √©chouer ici
fi
echo "Rapport Safety g√©n√©r√© : safety-results.json"
echo ""

# 7. Vulture (D√©tection de code mort)
echo -e "${YELLOW}Lancement de Vulture (d√©tection de code mort)...${NC}"
if vulture src/ --exclude=\"${VULTURE_EXCLUDES}\" --min-confidence ${VULTURE_MIN_CONFIDENCE}; then
    echo -e "${GREEN}Vulture : Scan termin√©. V√©rifiez la sortie pour le code mort potentiel.${NC}"
else
    echo -e "${RED}Vulture : Erreur lors de l'ex√©cution ou code mort trouv√©. V√©rifiez la sortie.${NC}"
    # FAILED_CHECKS+=("Vulture") # Vous pouvez choisir de le faire √©chouer ici
fi
echo ""

# --- R√©sum√© ---
echo -e "${YELLOW}--- Fin des v√©rifications de qualit√© du code ---${NC}"
if [ ${#FAILED_CHECKS[@]} -eq 0 ]; then
    echo -e "${GREEN}üéâ Toutes les v√©rifications principales (Black, isort, flake8) ont r√©ussi ! üéâ${NC}"
    echo -e "Veuillez v√©rifier manuellement les rapports de mypy, Bandit, Safety et Vulture."
else
    echo -e "${RED}‚ùå Certaines v√©rifications ont √©chou√© : ${FAILED_CHECKS[*]}${NC}"
    echo -e "Veuillez corriger les erreurs et v√©rifier les rapports g√©n√©r√©s."
    exit 1
fi

exit 0