name: Performance Testing

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run weekly performance tests on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:

jobs:
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-benchmark locust
      
      - name: Run performance benchmarks
        run: |
          python -m pytest tests/test_performance.py -v --benchmark-json=benchmark-results.json
        continue-on-error: true
      
      - name: Run comprehensive performance test
        run: |
          python comprehensive_performance_test.py
        continue-on-error: true
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            benchmark-results.json
            performance_report.json

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install locust requests
      
      - name: Create load test script
        run: |
          cat > load_test.py << 'EOF'
          from locust import HttpUser, task, between
          import json
          
          class EmailProcessingUser(HttpUser):
              wait_time = between(1, 3)
              
              @task(3)
              def health_check(self):
                  self.client.get("/health")
              
              @task(1)
              def webhook_test(self):
                  # Test webhook with invalid payload (should get validation error)
                  payload = {"test": "data"}
                  self.client.post("/webhook", 
                                 json=payload,
                                 headers={"Content-Type": "application/json"})
          EOF
      
      - name: Run load tests against production
        run: |
          # Only run if VERCEL_PRODUCTION_URL is set
          if [ ! -z "${{ secrets.VERCEL_PRODUCTION_URL }}" ]; then
            locust -f load_test.py --host=${{ secrets.VERCEL_PRODUCTION_URL }} \
                   --users 10 --spawn-rate 2 --run-time 60s --headless \
                   --html load_test_report.html
          else
            echo "VERCEL_PRODUCTION_URL not set, skipping load tests"
          fi
        continue-on-error: true
      
      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: load_test_report.html
