name: Deploy to Vercel

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  PYTHON_VERSION: "3.12"

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch: # Allow manual triggering

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install mypy

      - name: Lint with flake8
        run: |
          # Stop build if there are Python syntax errors or undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Check code formatting with black
        run: |
          black --check src/ tests/

      - name: Check import sorting with isort
        run: |
          isort --check-only src/ tests/

      - name: Type checking with mypy
        run: |
          mypy src/ --ignore-missing-imports
        continue-on-error: true # Allow this to fail for now

      - name: Run tests with coverage
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=70

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  deploy:
    name: Deploy to Vercel
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})

          # Extract the deployment source URL (without https://)
          DEPLOYMENT_SOURCE=$(echo "$DEPLOYMENT_URL" | sed 's|https://||')

          # Get the alias URL by searching for the matching source
          echo "Fetching alias information for deployment: $DEPLOYMENT_SOURCE"
          ALIAS_URL=$(vercel alias ls --token=${{ secrets.VERCEL_TOKEN }} | grep "$DEPLOYMENT_SOURCE" | awk '{print $2}' | head -1)

          if [ ! -z "$ALIAS_URL" ] && [ "$ALIAS_URL" != "$DEPLOYMENT_SOURCE" ]; then
            echo "deployment_url=https://$ALIAS_URL" >> $GITHUB_OUTPUT
            echo "Deployed to: $DEPLOYMENT_URL"
            echo "Available at alias: https://$ALIAS_URL"
          else
            echo "No alias found for this deployment, using deployment URL"
            echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "Deployed to: $DEPLOYMENT_URL"
          fi

      - name: Test Deployment
        run: |
          # Wait for deployment to be ready
          sleep 30

          DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment_url }}"

          if [ ! -z "$DEPLOYMENT_URL" ]; then
            echo "Testing deployment at: $DEPLOYMENT_URL"
            
            # Test health endpoint
            echo "Testing health endpoint..."
            if curl -f --retry 3 --retry-delay 10 "$DEPLOYMENT_URL/health"; then
              echo "✅ Health endpoint working"
            else
              echo "❌ Health endpoint failed"
              exit 1
            fi
            
            # Test webhook endpoint structure
            echo "Testing webhook endpoint..."
            WEBHOOK_RESPONSE=$(curl -s -X POST "$DEPLOYMENT_URL/webhook" \
              -H "Content-Type: application/json" \
              -d '{"test": "data"}')
            
            if echo "$WEBHOOK_RESPONSE" | grep -q "validation errors"; then
              echo "✅ Webhook endpoint is validating properly"
            else
              echo "❌ Webhook endpoint unexpected response: $WEBHOOK_RESPONSE"
              exit 1
            fi
            
            echo "✅ All deployment tests passed!"
          else
            echo "❌ Could not determine deployment URL for testing"
            exit 1
          fi

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful: ${{ steps.deploy.outputs.deployment_url }}"
          else
            echo "❌ Deployment failed"
          fi
